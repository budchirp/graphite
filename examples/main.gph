extern printf(str: string) -> void
extern print_number(number: i32) -> void

extern malloc(size: i32) -> *mut ptr
extern free(ptr: *ptr) -> void

include "add"
include "car"

var global = 16

type string_array = string[]

public fn test() -> void {
  printf("INLINE ASSEMBLY\n")
}

# comment
public fn main(argc: i32, argv: string_array) -> i32 {
  asm("call test" : : : :)

  printf("\nStart\n")

  printf("\nStruct\n")

  var my_struct = Car {
    name: "SuperCar\n",
    model: 2019,
    seats: 4,
  }

  print_number(my_struct.seats)
  print_number(my_struct.model)
  printf(my_struct.name)

  printf("\nArray\n")

  var array = [123, 234, 345, 456, 567]
  for (var mut i: i32 = 0; i < 5; i++) {
    print_number(array[i])
  }

  printf("\nAdding numbers\n")
  var x: i32 = add(global, 32)
  var y: i32 = (x * 1)
  var h: *i32 = &y
  print_number(*h)

  printf("\nFor loop\n")
  for (var mut i: i32 = 10; i > 0; i--) {
    print_number(i)
  }

  printf("\nVar without initializer\n")
  var mut j: i32
  j = y
  j = 32
  j = y
  print_number(j)

  printf("\nVar without initializer - pointer\n")
  var k: mut *i32
  k = &y;
  *k = 31
  print_number(*k)
  print_number(y)

  printf("\nWhile loop\n")
  var mut i: i32 = 0;
  while (i < 10) {
    print_number(i)
    i++
  }

  printf("\nBoolean check\n")
  var z: boolean = if (x == y) { true } else { false }
  if (z) {
    printf("x and y is 64\n")
  } else {
    printf("x and y is not 64\n")
  }

  printf("End\n")

  return (10 - 10) * 10
}
